============================= test session starts ==============================
platform linux -- Python 3.10.8, pytest-7.2.1, pluggy-1.0.0
rootdir: /home/justyn/sweng/p1, configfile: tox.ini
plugins: cov-3.0.0
collected 5 items

app/backend/api/tests.py FFFFF                                           [100%]

=================================== FAILURES ===================================
____________ TestCreateVendingMachine.test_vending_machine_created _____________

self = <django.db.backends.utils.CursorWrapper object at 0x7f8d737f9180>
sql = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (%s, %s, %s) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f8d737f9180>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d74bb0e50>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError

The above exception was the direct cause of the following exception:

self = <api.tests.TestCreateVendingMachine testMethod=test_vending_machine_created>

    def setUp(self):
        vm = VendingMachine(building=TEST_BUILDING, floor=TEST_FLOOR, location=TEST_LOCATION)
>       vm.save()

app/backend/api/tests.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1660: in execute_sql
    cursor.execute(sql, params)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d74bb0e50>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError
______________ TestCreateVendingMachine.test_vending_machine_repr ______________

self = <django.db.backends.utils.CursorWrapper object at 0x7f8d731d3550>
sql = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (%s, %s, %s) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f8d731d3550>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d73880940>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError

The above exception was the direct cause of the following exception:

self = <api.tests.TestCreateVendingMachine testMethod=test_vending_machine_repr>

    def setUp(self):
        vm = VendingMachine(building=TEST_BUILDING, floor=TEST_FLOOR, location=TEST_LOCATION)
>       vm.save()

app/backend/api/tests.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1660: in execute_sql
    cursor.execute(sql, params)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d73880940>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError
______________ TestCreateVendingMachine.test_vending_machine_str _______________

self = <django.db.backends.utils.CursorWrapper object at 0x7f8d731833a0>
sql = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (%s, %s, %s) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f8d731833a0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d73528a60>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError

The above exception was the direct cause of the following exception:

self = <api.tests.TestCreateVendingMachine testMethod=test_vending_machine_str>

    def setUp(self):
        vm = VendingMachine(building=TEST_BUILDING, floor=TEST_FLOOR, location=TEST_LOCATION)
>       vm.save()

app/backend/api/tests.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1660: in execute_sql
    cursor.execute(sql, params)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d73528a60>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError
____________________ TestCreateProduct.test_product_created ____________________

self = <django.db.backends.utils.CursorWrapper object at 0x7f8d731f95d0>
sql = 'INSERT INTO "api_product" ("name", "price", "on_hand") VALUES (%s, %s, %s) RETURNING "api_product"."id"'
params = ('test product', '1.00', 1)
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f8d731f95d0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d7352bc70>
query = 'INSERT INTO "api_product" ("name", "price", "on_hand") VALUES (?, ?, ?) RETURNING "api_product"."id"'
params = ('test product', '1.00', 1)

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.OperationalError: no such table: api_product

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError

The above exception was the direct cause of the following exception:

self = <api.tests.TestCreateProduct testMethod=test_product_created>

    def setUp(self):
        product = Product(name=TEST_PRODUCT, price=TEST_PRICE, on_hand=TEST_ON_HAND)
>       product.save()

app/backend/api/tests.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1660: in execute_sql
    cursor.execute(sql, params)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d7352bc70>
query = 'INSERT INTO "api_product" ("name", "price", "on_hand") VALUES (?, ?, ?) RETURNING "api_product"."id"'
params = ('test product', '1.00', 1)

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.OperationalError: no such table: api_product

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError
______________________ TestCreateStock.test_stock_created ______________________

self = <django.db.backends.utils.CursorWrapper object at 0x7f8d7373cbe0>
sql = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (%s, %s, %s) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')
ignored_wrapper_args = (False, {'connection': <DatabaseWrapper vendor='sqlite' alias='default'>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x7f8d7373cbe0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                # params default might be backend specific.
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d738836d0>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError

The above exception was the direct cause of the following exception:

self = <api.tests.TestCreateStock testMethod=test_stock_created>

    def setUp(self):
        vm = VendingMachine(building=TEST_BUILDING, floor=TEST_FLOOR, location=TEST_LOCATION)
>       vm.save()

app/backend/api/tests.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:812: in save
    self.save_base(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:863: in save_base
    updated = self._save_table(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1006: in _save_table
    results = self._do_insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/base.py:1047: in _do_insert
    return manager._insert(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/manager.py:85: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/query.py:1791: in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/models/sql/compiler.py:1660: in execute_sql
    cursor.execute(sql, params)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:67: in execute
    return self._execute_with_wrappers(
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:80: in _execute_with_wrappers
    return executor(sql, params, many, context)
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:84: in _execute
    with self.db.wrap_database_errors:
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/utils.py:89: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x7f8d738836d0>
query = 'INSERT INTO "api_vendingmachine" ("building", "floor", "location") VALUES (?, ?, ?) RETURNING "api_vendingmachine"."id"'
params = ('test building', 1, 'test room')

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.OperationalError: no such table: api_vendingmachine

../../miniconda3/envs/se/lib/python3.10/site-packages/django/db/backends/sqlite3/base.py:357: OperationalError
=============================== warnings summary ===============================
../../miniconda3/envs/se/lib/python3.10/site-packages/pytest_cov/plugin.py:256
  /home/justyn/miniconda3/envs/se/lib/python3.10/site-packages/pytest_cov/plugin.py:256: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_configure_node uses old-style configuration options (marks or attributes).
  Please use the pytest.hookimpl(optionalhook=True) decorator instead
   to configure the hooks.
   See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers
    def pytest_configure_node(self, node):

../../miniconda3/envs/se/lib/python3.10/site-packages/pytest_cov/plugin.py:265
  /home/justyn/miniconda3/envs/se/lib/python3.10/site-packages/pytest_cov/plugin.py:265: PytestDeprecationWarning: The hookimpl CovPlugin.pytest_testnodedown uses old-style configuration options (marks or attributes).
  Please use the pytest.hookimpl(optionalhook=True) decorator instead
   to configure the hooks.
   See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers
    def pytest_testnodedown(self, node, error):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.10.8-final-0 -----------
Name                                   Stmts   Miss Branch BrPart  Cover   Missing
----------------------------------------------------------------------------------
app/backend/api/__init__.py                0      0      0      0   100%
app/backend/api/admin.py                   5      0      0      0   100%
app/backend/api/apps.py                    4      0      0      0   100%
app/backend/api/models.py                 31      8      0      0    74%   15, 18, 36, 39, 58-59, 62, 70
app/backend/api/tests.py                  50     20      0      0    60%   25-28, 31-32, 37-38, 55-58, 66-69, 72-75
app/backend/backend/__init__.py            0      0      0      0   100%
app/backend/backend/test_settings.py      19      0      0      0   100%
----------------------------------------------------------------------------------
TOTAL                                    109     28      0      0    74%
Coverage HTML written to dir cov_html
Coverage XML written to file coverage.xml

=========================== short test summary info ============================
FAILED app/backend/api/tests.py::TestCreateVendingMachine::test_vending_machine_created
FAILED app/backend/api/tests.py::TestCreateVendingMachine::test_vending_machine_repr
FAILED app/backend/api/tests.py::TestCreateVendingMachine::test_vending_machine_str
FAILED app/backend/api/tests.py::TestCreateProduct::test_product_created - dj...
FAILED app/backend/api/tests.py::TestCreateStock::test_stock_created - django...
======================== 5 failed, 2 warnings in 1.55s =========================
